const User = require('../models/user');
// const {v4: uuidv4} = require('uuid');
const { setUser } = require('../service/auth');
async function handleUserSignUp(req, res) {
    const { name, email, password } = req.body;

    await User.create({
        name,
        email,
        password,
    });

    return res.redirect('/');
}

async function handleUserLogin(req, res) {
    const { email, password } = req.body;

    const user = await User.findOne({ email, password });

    if (!user) {
        return res.render('Login', { error: 'Invalid credentials' })
    }

    // const sessionId = uuidv4();

    // setUser(sessionId,user);

    // res.cookie('uid',sessionId);

    // console.log([...sessionIdToUserMap.entries()]);

    // for stateless authentication -->
    const token = setUser(user);
//     res.cookie('uid', token,{
//         expires: new Date(Date.now()+ (24*60*60*1000)), // time in millisecond.
//     }
//    );

    //    res.cookie('uid',token,{
    //     domain: '.google.com'
    //    });

    // I can also send the domain of cookie so cookie will go to that particular url and cookies are server specific means whenever a browser send request ot server so it also send the cookies with it in request and the server that create cookie there server send cookie.

    // Cookies are only limited to browser that they are feature of browser no to mobile apps so we use response there.


      res.cookie('token',token);

    console.log(token);

    // return res.json({token});

    return res.redirect('/');
}

module.exports = { handleUserSignUp, handleUserLogin };

//An authentication scheme is a systematic approach or method used to verify the identity of a user, device, or application attempting to access a resource or system.

//Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.” The bearer token is a cryptic string, usually generated by the server in response to a login request.

//Authorization: Bearer <token>. standard way for token-authentication.